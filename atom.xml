<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Camilo López A.]]></title>
  <link href="http://decklord.github.io/atom.xml" rel="self"/>
  <link href="http://decklord.github.io/"/>
  <updated>2014-01-15T14:38:23-03:00</updated>
  <id>http://decklord.github.io/</id>
  <author>
    <name><![CDATA[Camilo López A.]]></name>
    <email><![CDATA[camilo.lopez.a@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[El fracaso no existe, está en tu cabeza]]></title>
    <link href="http://decklord.github.io/blog/2014/01/15/el-fracaso-no-existe/"/>
    <updated>2014-01-15T08:15:35-03:00</updated>
    <id>http://decklord.github.io/blog/2014/01/15/el-fracaso-no-existe</id>
    <content type="html"><![CDATA[<h1>TL;DR</h1>

<p>El fracaso o el éxito son subjetivos, dependen de nuestro contexto cultural y son un estado mental personal. En realidad lo que importa es el camino, el apdendizaje detrás, no la meta en sí misma. Todo se reduce a aprender.</p>

<h1>El aprendizaje del narrador</h1>

<p>Un tema que me interesa mucho es el hecho de cómo el ser humano persive la realidad y su propia vida, en especial las cosas aparentemente negativas.</p>

<p>Una cosa que me encanta hacer es contar historias. Anécdotas de cosas. Muchas personas me dicen: <strong>&ldquo;a ti te pasa de todo&rdquo;</strong>. La verdad es que yo creo que no salgo fuera de lo común, la diferencia es que me gusta ser un narrador y por eso transformo cosas, a veces muy simples, en un buen relato (o al menos eso intento).</p>

<p><span class='pullquote-left' data-pullquote='Un desastre es una lección de vida.'></p>

<p>Debido a lo anterior, he aprendido que cada vez que me ocurre algo indeseable en la vida gano algo muy importante. Gano una historia que contar, lo cuál es una herramienta sumamente poderosa. Un desastre es una lección de vida.</p>

<p></span></p>

<p>Al contar una historia puedes repasar los hechos. Al repasar los hechos se ve lo ocurrido desde múltiples perspectivas. Hacer lo anterior inevitablemente nos lleva al <em>aprendizaje</em>, a reflexionar de nuestro actuar y sacar en limpio una lección.</p>

<p>Contar una historia usualmente va ligado a un debate. A un ir y venir de ideas respecto a lo ocurrido, lo cual potencia lo que se puede obtener desde múltiples perspectivas externas.</p>

<h1>El fracaso es una falacia, al igual que el éxito</h1>

<p><a href="http://www.edge.org/memberbio/giulio_boccaletti">Giulio Boccaletti</a> en su ensayo titulado <a href="http://www.edge.org/q2011/q11_7.html">Scale Analysis</a> comienza con una frase muy cierta.</p>

<blockquote><p>Dividir el universo en cosas que son lineales y las que no son lineales es similar a dividir el universo en cosas que son bananas y cosas que no son bananas. Muchas cosas no son bananas.</p></blockquote>


<p>Cuando hablamos de fracasos de alguna manera <strong>también dividimos el mundo en dos</strong>. El éxito y lo que no es éxito. Ahora bien, las cosas no son en blanco y negro. Todo esta hecho de matices, por lo tanto hablar de éxito o fracaso es una falacia. El éxito o fracaso estan dados por un contexto, plagado de tonos de grises, que proviene de nuestra cultura y, lo mas importante, <strong>¡vive en nuestra cabeza!</strong>.</p>

<h2>El vaso mitad lleno o mitad vacío</h2>

<p>Dos eventos idénticos pueden ser apreciados <strong>de manera completamente diferente por dos individuos</strong> o incluso la misma persona. Todo radica en la conexión con dicho evento y esto es subjetivo.</p>

<p>Supongamos que dos personas enferman. La primera es un completo desconocido en un lugar remoto, la segunda es un familiar o amigo cercano. En ambos tenemos la misma situación <strong>física</strong>, en las dos situaciones sentimos empatía, pero en grados completamente diferentes. Esa empatía viene de un contexto y es netamente subjetivo, no es algo tangible, si no que está en nuestro interior.</p>

<p>Otro ejemplo: Dos alumnos sacan nota 5.5 en la escala del 1 al 7. Para uno de ellos es su mejor nota y para el otro es la peor. El éxito de uno puede ser el fracaso de otro.</p>

<h2>Startups, startups everywhere</h2>

<p>En el mundo del emprendimiento y la empresa hay dos posturas. Quién no ha escuchado la frase:</p>

<blockquote><p>Cada fracaso nos acerca más al éxito.</p></blockquote>


<p><span class='pullquote-right' data-pullquote='No eres exitoso o perdedor, simplemente ganas experiencia.'>
Por otro lado, en <a href="http://37signals.com/rework/">Rework</a> plantean el fracaso como algo sobre valorado, ya que aprendes lo que <em>no hay que hacer</em>, pero no tienes idea de lo que <em>sí hay que hacer</em>. Yo lo veo de manera complementaria. La realidad no se compone de éxitos o fracasos. Se compone de experiencias que proveen un aprendizaje. No eres exitoso o perdedor, simplemente ganas experiencia.
</span></p>

<h2>La tortuga y el camino</h2>

<p>Cuando estamos detrás del éxito e intentamos evitar el fracaso, caemos en el juego de perseguir la tortuga que se plantea en <a href="http://es.wikipedia.org/wiki/Paradojas_de_Zen%C3%B3n">Las paradojas de Zenón</a>.</p>

<p>En la historia, <em>Aquiles</em>, el más rápido, persigue una <em>tortuga</em>. Cada vez que Aquiles llega a la tortuga, esta se mueve un poco más mientras el se acerca y por tanto no la puede atrapar nunca (en realidad sí, pero le toma tiempo infinito).</p>

<p>El éxito se idealiza como una <em>meta alcanzable</em>, como una tortuga, cuando en verdad el concepto en si mismo no existe y por consecuencia el fracaso tampoco. Siempre, por muy buenos que seamos, nuestro camino tendrá matices de grices que se podrían mejorar. Cuando creemos que atrapamos a la <em>tortuga</em> nos damos cuenta que necesitamos un poco más. La tortuga ya no esta ahí, está unos pasos más allá.</p>

<h1>Concluyendo</h1>

<p><span class='pullquote-left' data-pullquote='El fallar es una situación que aparenta ser un lobo, pero en realidad es una obeja disfrazada'>
Son los matices de grices lo importante. El fallar es una situación que aparenta ser un lobo, pero en realidad es una obeja disfrazada. Es difícil, pero en el fondo es una poderoza oportunidad de aprendizaje. La clave es como reaccionamos ante esto. Es ahí donde recide la sabiduría. ¿reflexionamos o nos deprimimos?.</p>

<p>Cualquier meta de mediano o largo plazo pierde relevancia en el tiempo. Cumplir objetivos es simplemente un punto dentro de un largo camino. Dos tremendos ejercicios para ver las cosas en perspectiva cuando suceden verdaderas catástrofes en el presente es hacernos la pregunta: <strong>¿Esto que me ha ocurrido hoy sera relevante en 10 años más?</strong> y la segunda <strong>¿Puedo transformar esta calamidad en una gran historia que contar?</strong>.
</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[¿Trabajas en muchas cosas y te cuesta retomar el hilo?]]></title>
    <link href="http://decklord.github.io/blog/2014/01/05/manteniendo-un-todo-list/"/>
    <updated>2014-01-05T10:56:32-03:00</updated>
    <id>http://decklord.github.io/blog/2014/01/05/manteniendo-un-todo-list</id>
    <content type="html"><![CDATA[<h1>TL;DR</h1>

<p>Si trabajas en muchos proyectos, dispares entre sí, retomar el hilo conductor de una tarea específica puede tomar tiempo. Es por esto que mantener una lista de tareas que te permitan recordar que hacías la última vez que que trabajaste en algo puede ayudar. Además, una breve nota para ti mismo al final de la jornada ayuda a empezar con el trabajo con fluidez a la mañana siguiente.</p>

<!--more-->


<h1>Dafuq I was doing yesterday</h1>

<p>Los últimos meses he tenido mi cabeza ocupada con múltiples proyectos dispares. Aplicaciones <a href="https://itunes.apple.com/cl/app/siga-chile/id688969871?mt=8">para iOS como freelance</a>, hacer APIs, escribir en un Blog que nadie lee y unas cuantas aplicaciones web con <a href="https://www.djangoproject.com/">Django</a>.</p>

<p>Cada vez que quiero retomar una de estas cosas, me cuesta recordar en lo que estaba trabajando en el minuto que me detuve. Éso complica las cosas, pues es difícil entrar en <a href="http://en.wikipedia.org/wiki/Flow_(psychology)">la zona</a> cuando no tienes idea de lo que hay que hacer. Ocurre lo mismo cuando dejamos una tarea a la mitad o estámos trabajando en projectos muy complejos.</p>

<p>La idea de este post es llevarle la contra al dicho:</p>

<blockquote><p>El que mucho abarca poco aprieta.</p></blockquote>


<p>Claramente el tipo que lo inventó no sabía organizarse <em>:P</em>.</p>

<h1>Las todo-list</h1>

<p>En mi anterior post, <a href="http://decklord.github.io/blog/2013/12/23/el-paradigma-del-hacer-y-el-por-que-evitar-las-reuniones/">El paradigma del hacer y el por qué evitar las reuniones</a> mencioné las <em>todo-list</em>. Manejar una pequeña lista de tareas ayuda mucho a llevar la pista de nuestro trabajo al cambiar de contexto.</p>

<p>Actualmente, existen mútiples formas de llevar <em>todo-list</em>, tanto personales como en equipo: Aplicaciones web, archivos de texto plano, plug-ins en editores de texto o simplemente papel y lápiz. A continuación voy a comentar brevemente el estado del arte de este campo a la fecha.</p>

<h2>Aplicaciones</h2>

<p>Acá nos encontramos con muchas opciones para todo tipo de perfiles. Si eres fan de Gmail y te gusta la integración, una buena alternativa puede ser <a href="https://mail.google.com/mail/help/tasks/">Google Tasks</a> o el nuevo <a href="https://drive.google.com/keep/u/0/">Google Keep</a>. Otra que me gustaba hace varios años por su simplicidad es <a href="https://todoist.com/">Todoist</a>.</p>

<p>Pasando a aplicaciones un poco mas robustas, tenemos <a href="http://www.rememberthemilk.com/">RememberTheMilk</a>, <a href="https://www.wunderlist.com/">Wunderlist</a>, <a href="https://evernote.com/">Evernote</a> y finalmente <a href="https://trello.com/">Trello</a> el administrador de proyectos genérico de los creadores de <a href="http://www.stackoverflow.com">StackOverflow</a>, que también mucha gente esta usando como <em>todo-list</em>.</p>

<h2>¿Y para los hackers?</h2>

<p>Para los más hackers existen las más variadas alternativas.</p>

<h3>Dropbox</h3>

<p>Lo primero y quizás más simple: Sincroniza un <em>todo.txt</em> en <a href="http://www.dropbox.com">Dropbox</a>, si quieres llevarlo un paso más allá está <a href="http://todotxt.com/">Todo.txt</a>.</p>

<h3>Plugins en editores de texto</h3>

<p>Como buen hacker tu mejor amigo es tu editor de texto, por tanto, ¿qúe mejor que manejar el <em>todo-list</em> en mi editor? Si eres fan de <em>vi</em>, te puede interesar <a href="http://quicktask.aaronbieber.com/">Quicktask</a>, para <em>emacs</em> está disponible <a href="http://orgmode.org/">orgmode</a> y para <em>Sublime Text</em> esta el tremendo plugin <a href="https://github.com/aziz/PlainTasks">PlainTasks</a>, que se puede instalar usando <a href="https://sublime.wbond.net/">Package Manager</a></p>

<h3>Gist</h3>

<p>Recientemente en <a href="https://news.ycombinator.com/">hackernews</a> estaba dando vueltas un artículo de <a href="http://carlsednaoui.com/post/70299468325/the-best-to-do-list-a-private-gist">Carl Sednaoui</a> sobre cómo usar un <a href="http://gist.github.com">Gist</a> como un efectivo <em>todo-list</em>. Vale la pena leerlo.</p>

<h2>El problema de la todo-list y mis experimentos</h2>

<p>A pesar de ser un usuario constante de las <em>todo-list</em> para ordenarme, a veces no es suficiente. Tener que llevar un control de todos los proyectos en los que me desenvuelvo a veces se pone caótico. A pesar de saber en qué tarea estoy trabajando, no se <em>exactamente</em> qué estaba haciendo.</p>

<h3>Git diff</h3>

<p>Para solucionar lo anterior, a la hora de programar, estoy intentando acostumbrarme a <em>no hacer commit en la última media hora de trabajo</em>. La idea es que a la mañana siguente puedes hacer:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git diff my_file
</span></code></pre></td></tr></table></div></figure>


<p>Al leer los cambios te da una idea bastante clara de lo que hacías.</p>

<p>El lado malo es que para esto hay que ser riguroso, estar haciendo <em>commits</em> contstantes es importante, de esta manera si pierdes tu código, no es mucho. Lo ideal es tener el hábito de hacer <a href="http://lucasr.org/2011/01/29/micro-commits/">micro-commits</a>. Otro punto negativo es que es un poco lento leer cada archivo. Ésto se puede combinar con lo siguiente:</p>

<h3>Escribir una nota para tu yo del futuro</h3>

<h4>El método irreverente</h4>

<p>Estoy probando con un archivo llamado <em>dafuq_i_was_doing_yesterday.txt</em> y que mantengo en el <em>.gitignore</em> de cada proyecto. En él escribo una nota sobre lo que estoy haciendo en los últimos 5 minutos <em>antes de irme o terminar de trabajar</em>. La ventaja de esto último es que no necesitas programar nada y el método puede tener variaciones y ser adaptado. Por ejemplo, simplemente se puede hacer con una nota en un post-it o en un archivo de texto sincronizado con <em>Dropbox</em>. Junto con <em>git-diff</em> se vuelve el método más efectivo que he encontrado hasta el minuto para retomar un proyecto.</p>

<h1>Conclusiones</h1>

<p>En la actualidad hay muchas formas de organizar el trabajo en tareas, depende de cada uno que método resulta más efectivo, desde aplicaciones hasta un simple papel. Probablemente hay mecanismos que aún no conozco y que se salen del alcance de este humilde artículo.</p>

<p>Todo esto apunta a maximizar tu concentración lo antes posible para poder llegar a <em>tu tope de productividad</em>.</p>

<p>Y tú, estimado lector, ¿qué métodos usas?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[¡Nunca más escribas HTML!]]></title>
    <link href="http://decklord.github.io/blog/2013/12/31/haml-el-sass-de-css/"/>
    <updated>2013-12-31T19:09:52-03:00</updated>
    <id>http://decklord.github.io/blog/2013/12/31/haml-el-sass-de-css</id>
    <content type="html"><![CDATA[<p><img src="http://decklord.github.io/images/posts/2013_12_31.jpg" alt="" /></p>

<h1>TL;DR</h1>

<p>Si estás haciendo frontend usa HAML, no HTML, te cambiará la vida, lo prometo.</p>

<h1>Les presento HAML</h1>

<p>Probablemente si no eres desarrollador las siglas <em>HTML</em>, <em>CSS</em>, <em>HAML</em> o <em>SASS</em> no tendrán ningún sentido. Si es así, recomiendo dejar de leer este artículo pues va orientado a programadores. Ahora bien, si eres programador y no te suena lo que es <em>HAML</em>, te recomiendo de inmediato reemplazar <em>HTML</em> por esta maravillosa herramienta.</p>

<p>Para los desarrolladores de <em>Ruby</em> posiblemente esto es archiconocido, pero para los que estamos en el mundo de <em>python</em> y <em>Django</em> es toda una novedad, al menos para mí.</p>

<!-- more -->


<h1>Descubriendo la herramienta</h1>

<p>Hace unos días me entretenía programando una app web para análisis de texto y estaba absolutamente intoxicado escribiendo <em>HTML</em> para la parte de la interfaz gráfica. En ese minuto de colapso decidí buscar si existía algúna forma de escribir <em>HTML</em> un poco más amigable, como <em>CSS</em> usando <em>LESS</em> o <em>SASS</em>.</p>

<p>Típico que tienes un <em>HTML</em> enorme, desordenado y muy difícil de leer. De alguna forma es muy complejo mantener las reglas del buen programador a la hora de hacer un template en <em>HTML</em> por que el idioma no lo permite, sencillamente es feo. Personalmente yo culpo de esto a los tags de cerrado y a las miles de repeticiones: div div div div div div (más de ésto después).</p>

<p>Mi primer resultado en <a href="http://lmgtfy.com/?q=sass+equivalent+for+html">Google</a> fue <a href="http://haml.info/">HAML</a> y vi la luz. Nativamente está para Ruby, pero existe su equivalente en Django: <a href="https://github.com/jessemiller/HamlPy">HamlPy</a> escrito por <a href="https://github.com/jessemiller">Jesse Miller</a> y que funciona <em>out of the box</em> con dos líneas de configuración en el <em>settings.py</em>.</p>

<h1>No querrás volver atrás</h1>

<p>La syntaxis cambia brutalmente por tres razones. La primera es que <strong>pythonizamos el HTML</strong>. Una de las cosas geniales de Python es que no usa llaves, en su lugar el lenguaje te fuerza a seguir una indentación determinada y ser consistente en ello, por esto se evita el típico problema de: <em>¿Qué llave cierra qué cosa?</em>. HAML nos da este poder en HTML, por lo tanto, <strong>te olvidas de cerrar los tags</strong>, ¡Que maravilla!.</p>

<p>Lo segundo es que los parámetros de los elementos se pasan en formato <em>JSON</em>. Esto nos cierra el círculo de la consistencia, todo en lenguajes familiares que siguen un mismo patrón: JSON, indentación forzada, no más tags de cierres. Todo converge en un template legible, ordenado y mantenible.</p>

<p>El tercer punto es que sigue un gran principio: <em>DRY, don&rsquo;t repeat yourself</em>. Antiguamente para diagramar sitios web se usaban tablas. Luego, con las hojas de estilo <em>CSS</em> todo lo anterior se transformaron en miles de <em>divs</em>, transformándose en el tag más repetido por lejos. ¿Te imaginas no tener que repetir esto mil veces? Adivina&hellip;</p>

<h1>Las manos en la masa, ejemplos</h1>

<p>Ahora veamos algunos ejemplos de la utilización de HAML.</p>

<h2>No mas divs.</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>.small hola
</span></code></pre></td></tr></table></div></figure>


<p>es equivalente a:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;small&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    hola
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>wooooow</em></p>

<h2>Anidando elementos</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>.small
</span><span class='line'>  %ul
</span><span class='line'>    %li
</span><span class='line'>      %p Estoy anidado
</span></code></pre></td></tr></table></div></figure>


<p>Es equivalente a:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;small&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;p&gt;</span>Estoy anidado<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>¿Parámetros?</h2>

<p>Para agregar propiedades a un elemento html usamos <em>JSON</em>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>%input{&#39;type&#39;:&#39;text&#39;, &#39;name&#39;:&#39;dirty_text_field&#39;}
</span></code></pre></td></tr></table></div></figure>


<p>Es equivalente a:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&#39;text&#39;</span> <span class="na">name=</span><span class="s">&#39;dirty_text_field&#39;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Anidando clases e ids</h2>

<p>Se pueden anidar clases o ids escribiéndolos uno tras otro, incluso con parámetros:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>.small.blue.left#user-name{&#39;placeholder&#39;:&#39;something&#39;}
</span></code></pre></td></tr></table></div></figure>


<p>Es equivalente a:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&#39;user-name&#39;</span> <span class="na">class=</span><span class="s">&#39;small blue left&#39;</span> <span class="na">placeholder=</span><span class="s">&#39;something&#39;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Conclusiones</h1>

<p>Llevo usando <em>HamlPy</em> desde hace una semana y estoy encantado, vale la pena aprender la syntaxis y pasar por el breve setup inicial, ahora escribo código <em>HTML</em> mucho más rápido y editarlo se hace muy sencillo. Los invito a ver el proyecto en <a href="https://github.com/jessemiller/HamlPy">GitHub</a> y probarlo ustedes mismos.</p>

<p>Hasta la próxima.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[El paradigma del hacer y el por qué evitar las reuniones]]></title>
    <link href="http://decklord.github.io/blog/2013/12/23/el-paradigma-del-hacer-y-el-por-que-evitar-las-reuniones/"/>
    <updated>2013-12-23T23:25:31-03:00</updated>
    <id>http://decklord.github.io/blog/2013/12/23/el-paradigma-del-hacer-y-el-por-que-evitar-las-reuniones</id>
    <content type="html"><![CDATA[<h1>Getting things done</h1>

<p>Hace años que sigo la <a href="http://en.wikipedia.org/wiki/Getting_Things_Done">filosofía GTD</a> gracias al conocido blog <a href="http://lifehacker.com/search?q=gtd">Lifehacker</a>. Hoy, gracias a eso, me organizo de manera natural siguiendo ciertas reglas de oro. Algunas que ahora se me vienen a la cabeza son:</p>

<ol>
<li>Transformar gmail en un todo-list dejando en el inbox sólo los emails
que tengan algo pendiente que resolver.</li>
<li>La tecnología es tu amiga, sácale el jugo, no seas anticuado sin razón de peso.</li>
<li>Memoriza los shortcuts de las herramientas que usas, evita el mouse, el teclado siempre es más rápido.</li>
<li>Automatiza o delega todo lo que puedas.</li>
<li>Organiza tu espacio de trabajo de la manera más eficiente posible.</li>
<li>Buscar métodos para entrar rápidamente en <a href="http://en.wikipedia.org/wiki/Flow_(psychology)">&ldquo;la zona&rdquo;</a>.</li>
<li>Divide todo lo que tienes que hacer en <a href="http://facilethings.com/blog/en/small-things-first">micro tareas</a> dentro de un todo-list.</li>
</ol>


<p><span class='pullquote-right' data-pullquote='Terminar las tareas pequeñas te permite obtener la sensación de estar avanzando, es un detalle sutil pero tiene un impacto tremendo en la motivación al hacer cosas y terminarlas en tiempo récord.'>
El primer y último punto son claves, el todo-list es tu amigo. Es fundamental para adoptar la metodología <em>del hacer</em> o <em>resolver</em>. No importa si es en un papel o en un computador. Lo importante es  descomponer tareas grandes, siguiendo el clásico principio de <a href="http://en.wikipedia.org/wiki/Divide_and_conquer_algorithm">dividir para reinar</a>.</p>

<p>El orden también es importante, <strong>de <a href="http://99u.com/articles/19139/start-small-why-tinkerers-get-things-done">la más pequeña a la más compleja</a>, comenzando por lo más fácil</strong>. Terminar las tareas pequeñas te permite obtener la sensación de estar avanzando, es un detalle sutil pero tiene un impacto tremendo en la motivación al hacer cosas y terminarlas en tiempo récord.
</span></p>

<p>Ahora bien, ¿Cómo se relaciona esto a las reuniones?
¿Por qué son <strong>una pérdida de tiempo</strong>?</p>

<!-- more -->


<h2>La filosofía del hacer</h2>

<p>Tuve la oportunidad de participar en el programa <a href="http://www.techstars.com/program/locations/nyc/">TechStars, en NY</a>
a principios de 2013. Ahí me tocó conocer gente de la cuál pude aprender muchísimo respecto a estas prácticas, alineadas con lo anterior y a otros paradigmas de los archiconocidos libros <a href="http://s3.amazonaws.com/37assets/svn/Rework-by-Jason-Fried-and-David-Heinemeier-Hansson-Excerpts.pdf">Rework</a> y <a href="http://theleanstartup.com/">The Lean Startup</a>.</p>

<p><span class='pullquote-left' data-pullquote='Si asimilas estos libros comprendes que lo importante está en centrarse en
el resolver y ejecutar.'>
Si asimilas estos libros comprendes que lo importante está en centrarse en
el resolver y ejecutar. El término gringo que me gusta más es <em>Deliver</em>. Cuando nos
encontramos en una organización pequeña y con escasos recursos, el típico
escenario de Emprendimiento/Startup, <strong>no te puedes dar el lujo de perder
el tiempo en burocracia</strong>.</p>

<p>El que pierde el tiempo quiebra, así de simple. ¿Por qué? porque no tienes o no alcanzas a tener producto y por ende tampoco resultados, por lo tanto, se acaban los recursos y tu negocio/idea/organización/proyecto fracasa. Todo lo que no implique estar generando resultados pierde sentido bajo esta visión, lo cual puede sonar obvio, pero en la práctica es fácil perder el foco.
</span></p>

<h2>¿Estás siendo efectivo?</h2>

<p>Estar ocupado no es suficiente. Adoptar prácticas como el todo-list ayudan a ser una persona efectiva a la hora de <em>hacer cosas</em>, <em>resolver</em>, <em>Deliver</em>, etc. pero es importante llegar a metas relevantes. Aquí hay una distinción importante, no sirve que te ocupes de muchas cosas cuando no hay ningún resultado. <strong>¡Estar ocupado no es sinónimo de HACER!</strong>.</p>

<h1>Reuniones</h1>

<h2>¿Nos juntamos en una hora más?</h2>

<p>Ahora bien, las reuniones nos alejan del <em>Deliver</em> pues tienen una trampa: Nos hacen sentir ocupados, la falsa ilusión de avanzar, lo que nos lleva a un estereotipo al que me gusta llamarle <em>el planificador de planificaciones</em> o más conocido como <em>el burócrata</em>.</p>

<p>En Rework, Jason Fried y David Heinemeier hacen <a href="http://gettingreal.37signals.com/ch07_Meetings_Are_Toxic.php">hincapié en las reuniones</a>, al punto de referirse a ellas como <strong>eventos tóxicos</strong>.</p>

<p><span class='pullquote-right' data-pullquote='No hay nada peor que estar 2 horas en una reunión que podría haber durado 5 minutos, lo más lamentable es que usualmente pasa eso.'>
La base de este pensamiento proviene del hecho de que en una reunión se <em>habla de lo que se hará</em> pero le quitamos tiempo a lo más importante, <em>el hacer</em>. La reunión debe ser restringida al máximo: el mínimo de personas, el mínimo de tiempo e ir <strong>al callo</strong>. De lo contrario perdemos el control.</p>

<p>No hay nada peor que estar 2 horas en una reunión que podría haber durado 5 minutos, lo más lamentable es que usualmente pasa eso. En una reunión las personas tendemos a perder el hilo, divagar, bromear, contar anécdotas, etc. sobre todo en la cultura <em>chilensis</em> y para eso hay otras instancias.
</span></p>

<h2>El caso más dramático, la reunión periódica</h2>

<p>No hay nada peor que una reunión a la que estamos obligados a ir en forma periódica. Son dos los grandes motivos:</p>

<h3>Esperando la reunión</h3>

<p>Como tenemos la reunión agendada, se espera a la reunión para tocar los temas importantes, a pesar de que eran para ayer. ¿Si no, de que hablaremos en la reunión? Si la reunión es un miércoles, habrá que esperar al próximo miércoles para tocar las cosas urgentes del jueves, viernes, lunes y martes. ¡Mal! No tengas la reunión, cierra y decide los asuntos de inmediato con las personas que corresponda en una conversación informal, <strong>¡<a href="http://es.wikipedia.org/wiki/Principio_KISS">keep it simple</a>!</strong>.</p>

<h3>Calentando el asiento</h3>

<p>La reunión usualmente tiene un periodo de tiempo fijo. Si no tenemos nada que comentar, discutir o proponer, muchas veces la reunión se hace igual con temas intrascendentes, haciendo perder el tiempo a todos.</p>

<h3>¿Cómo simplificar la burocracia?</h3>

<p>En mi opinión, la reunión realmente efectiva <em>es espontánea</em>. En ella todas las partes conocen su rol, saben del tema y están alineados <em>en el hacer</em>, aparece oportunamente cuando es <em>necesario</em> discutir algo que no está claro y se hace <em>en el acto</em>, esto se nota mucho pues usualmente las discusiones en este contexto no llegan a más de diez minutos y rápidamente todos vuelven a su puesto de trabajo, la reunión es un medio y no un fin. Más que una reunión es una conversación informal que permite dejar los lineamientos claros para seguir <em>haciendo</em>.</p>

<p>Antes de proponer una reunión hay que analizar lo que se va a plantear. La primera pregunta es: <strong>¿puedo llegar al mismo resultado enviando un email?</strong>. Si la respuesta es sí, entonces manda el email y fin. El correo es mucho más eficiente, es asíncrono y remoto, por lo que permite a las partes colaborar en diferentes espacios de tiempo y en cualquier lugar además de que deja un registro. Ideal para delegar tareas sencillas o medias.</p>

<p>Lo segundo, <strong>¿es necesario convocarlos a todos?</strong> Muchas veces queremos que todos participen de algo, cuando la mejor alternativa probablemente es ir de manera individual tratando los temas que competen a cada persona. Así no quitamos tiempo a los demás.</p>

<p>Tercero: <strong>¿realmente necesito una reunión para tomar esta decisión?</strong>
Si estás en el poder de tomar una decisión sin requerir al resto, házlo y luego comunícalo. Ahorrarás toda una discusión, muchas veces redundante e innecesaria. Como se dice coloquialmente:</p>

<blockquote><p>Es mejor pedir perdón que pedir permiso.</p></blockquote>


<p>Ejemplos de ésto es la delegación de tareas: Asigna. Comunica. Si alguien no esta de acuerdo, itera, pero <strong>ejecuta rápido</strong>. Supongo que a esto se le llama <strong>Lean Management</strong>.</p>

<h1>Concluyendo</h1>

<p>Creo que hay muchas más cosas que se pueden criticar a las reuniones, hay aún más preguntas que validar a la hora de pensar en proponer una, pero esto es un blog, <em>debería ser relativamente breve, para no espantar al lector</em>, por lo tanto me quedo acá.</p>

<p>A pesar de todo, hay ocasiones donde una reunión es necesaria. Un ejemplo pueden ser las situaciones donde se debe llegar a un acuerdo, se requiere de debate y éste tiene una complejidad a tal grado que las actuales tecnologías podrían entorpecer algo de esta envergadura, por ejemplo, una reunión de directorio. Ahora bien, en empresas pequeñas rara vez vemos una situación como ésta. Otro caso válido es hacer brainstorming para buscar soluciones creativas a un problema.</p>

<p><span class='pullquote-left' data-pullquote='Sé práctico, ejecutor, no burócrata.'>
Aún así, evita las reuniones, nos quitan tiempo importante que se puede invertir en hacer cosas concretas. Sé práctico, ejecutor, no burócrata.
</span></p>

<p>Si por algún extraño motivo el lector cree que este artículo aplica sólo a informáticos está profundamente errado. <em>Incluso el tip del teclado del principio</em>. Por otro lado, has leído hasta aquí. Te mereces un premio.</p>

<p>Hasta la próxima.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programando condicionales legibles o como hacer un if decente, primera parte]]></title>
    <link href="http://decklord.github.io/blog/2013/12/21/programando-condicionales-legibles-o-como-hacer-un-if-decente/"/>
    <updated>2013-12-21T01:25:29-03:00</updated>
    <id>http://decklord.github.io/blog/2013/12/21/programando-condicionales-legibles-o-como-hacer-un-if-decente</id>
    <content type="html"><![CDATA[<h1>TL;DR</h1>

<p>Escribir un if es clave, hacerlo bien es absolutamente importante. Aquí hay algunos tips para ordenar las cosas.</p>

<h1>Los Condicionales</h1>

<p>En la vida del desarrollador es necesario definir muchos condicionales. Con
<em>condicionales</em> nos refierimos a escribir un <em>if</em> en partes del código, lo cual
ocurre cientos o incluso miles de veces en un software.</p>

<p>Los condicionales son una pieza clave y si una cosa de este estilo se hace mal
tiene un impacto incalculable en tu trabajo por dos motivos. El primero es que si
definimos malos condicionales hacemos que el código tienda a tener errores.
El segundo, por otro lado, es que dificulta su mantenibilidad, lo cual es tanto
o más importante que lo anterior.</p>

<p>De esto se pueden escribir libros enteros, pero tocaré algunas cosas que a mi
parecer son claves de considerar.</p>

<!-- more -->


<h1>Condiciones engorrosas</h1>

<p>Ahora bien, ¿qué implica <em>buenos</em> o <em>malos</em> condicionales? Pongámoslo en un
ejemplo, supongamos que queremos validar un formulario de registro y nos llega
el usuario junto con el email:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">validate_form</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;name&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>    <span class="n">email</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;email&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">name</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Error, you must enter a name&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">email</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s">r&quot;^[A-Za-z0-9\.\+_-]+@[A-Za-z0-9\._-]+\.[a-zA-Z]*$&quot;</span><span class="p">,</span> <span class="n">email</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Error, you must enter a valid email&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>En el ejemplo anterior, la segunda validación de email es una expresión regular
que confirma si el correo tiene el formato correcto. En validaciones de email
esto es muy común, por lo tanto <em>inferimos</em> que se trata de eso. El problema
es que en la práctica hacer estas inferencias no es trivial, ya que típicamente nos
enfrentamos a contextos desconocidos. Una validación larga como ésta nos puede
traer muchos dolores de cabeza al intentar descifrarla. El caso del email es la
excepción a la regla.</p>

<p>¿Cómo se puede hacer esto más legible?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">validate_form</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;name&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>    <span class="n">email</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;email&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">name</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Error, you must enter a name&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#Yes, now I&#39;m more legible</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">email</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">email_formatted</span><span class="p">(</span><span class="n">email</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Error, you must enter a valid email&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#my name reveals my purpose</span>
</span><span class='line'><span class="k">def</span> <span class="nf">email_formatted</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
</span><span class='line'>    <span class="c">#I add this variable to avoid a long ugly line</span>
</span><span class='line'>    <span class="n">regular_expression</span> <span class="o">=</span> <span class="s">r&quot;^[A-Za-z0-9\.\+_-]+@[A-Za-z0-9\._-]+\.[a-zA-Z]*$&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">regular_expression</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Acá hay varias cosas que notar. Lo primero es que encapsulamos la lógica de
validación en una función. Esto abre paso a usar simplemente el método en
nuestro condicional y hacerlo más pequeño, lo que mejora su legibilidad.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">email_formatted</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
</span></code></pre></td></tr></table></div></figure>


<p>Por otra parte, el método de validación <em>email_formatted</em> tiene un nombre que
revela su propósito. Esto es clave, ya que permite leer la condición y determinar
inmediatamente lo que hace. Más aún, al poner este nombre, se lee literalmente
 en inglés: <em>not email formatted</em>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">email</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">email_formatted</span><span class="p">(</span><span class="n">email</span><span class="p">):</span>
</span></code></pre></td></tr></table></div></figure>


<p>Por último y no menos importante, en la función de validación
separo en una variable la expresión regular, ya que nos ayuda en la legibilidad
de lo que hacemos al tener dos líneas cortas y claras.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="n">regular_expression</span> <span class="o">=</span> <span class="s">r&quot;^[A-Za-z0-9\.\+_-]+@[A-Za-z0-9\._-]+\.[a-zA-Z]*$&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">regular_expression</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Muchas validaciones</h1>

<p>En ocasiones hay que validar muchas cosas para obtener un output concreto:
Que el string contenga o no contenga algún parámetro, que sea de cierto tipo de
dato, etc. Situaciónes como la siguiente:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">validate_product</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">code</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;code&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">code</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">code</span><span class="p">)</span> <span class="o">==</span> <span class="mi">26</span> <span class="ow">and</span> <span class="n">parameter</span><span class="p">[:</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;01&quot;</span> <span class="ow">and</span> <span class="n">big_calculation</span><span class="p">(</span><span class="n">code</span><span class="p">)</span> <span class="ow">and</span> <span class="n">parameter</span><span class="p">[:</span><span class="mi">24</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;NN&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;The rabbit is in the hole&quot;</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">code</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">code</span><span class="p">)</span> <span class="o">==</span> <span class="mi">26</span> <span class="ow">and</span> <span class="n">parameter</span><span class="p">[:</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;01&quot;</span> <span class="ow">and</span> <span class="n">big_calculation</span><span class="p">(</span><span class="n">code</span><span class="p">)</span> <span class="ow">and</span> <span class="n">parameter</span><span class="p">[:</span><span class="mi">24</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;PP&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;The rabbit is in the hole, but is from another kind&quot;</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;No rabbit :(&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>El código anterior tiene varios problemas. Lo primero y mas evidente es que
se validan muchas condiciones de corrido (5!), esto lo hace difícil de comprender.
Tampoco cabe en la pantalla, por lo tanto estamos violando <a href="http://programmers.stackexchange.com/questions/148677/why-is-80-characters-the-standard-limit-for-code-width">la regla de 80 caracteres</a>.
Además se repiten cosas en las dos condiciones, solo la última parte es
diferente, sumado a que estamos haciendo un <em>big calculation</em> dos veces.</p>

<h2>Agrupando condiciones en variables boolean autoexplicativas</h2>

<p>Una manera de simplificar la legibilidad de un set de condiciones es unirlas en
variables boolean. Por ejemplo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">code_has_correct_format</span> <span class="o">=</span> <span class="n">parameter</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">parameter</span><span class="p">)</span> <span class="o">==</span> <span class="mi">26</span> <span class="ow">and</span> <span class="n">parameter</span><span class="p">[:</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;01&quot;</span>
</span><span class='line'><span class="n">some_result_is_ok</span> <span class="o">=</span> <span class="n">big_calculation</span><span class="p">(</span><span class="n">parameter</span><span class="p">)</span>
</span><span class='line'><span class="n">code_is_nn_kind</span> <span class="o">=</span> <span class="n">parameter</span><span class="p">[:</span><span class="mi">24</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;NN&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">code_has_correct_format</span> <span class="ow">and</span> <span class="n">some_result_is_ok</span> <span class="ow">and</span> <span class="n">code_is_nn_kind</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;The rabbit is in the hole&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Como se ve más arriba, transformamos condiciones que a veces no son tan claras
asignándoles un nombre que revele su propósito. La idea es unit varias
condiciones en una variable, siempre y cuando pertenezcan a un propósito común.
En el ejemplo, todas las condiciones que validan el formato se fusionan en un
sólo parámetro y se utiliza un nombre adecuado: <em>code_has_correct_format</em>.</p>

<p>De esta manera, simplificamos la lectura, la cual se vuelve directa y evitamos
la redundancia. Lamentablemente las validaciones de formato aún son muy largas,
de esta forma lo separamos en una función cuyo nombre describa su propósito.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">validate_product</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">code</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;code&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">code_has_correct_format</span> <span class="o">=</span> <span class="n">code_formatted</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'>    <span class="n">some_result_is_ok</span> <span class="o">=</span> <span class="n">big_calculation</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'>    <span class="n">code_is_safe_to_use</span> <span class="o">=</span> <span class="n">code_has_correct_format</span> <span class="ow">and</span> <span class="n">some_result_is_ok</span>
</span><span class='line'>    <span class="n">code_is_nn_kind</span> <span class="o">=</span> <span class="n">parameter</span><span class="p">[:</span><span class="mi">24</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;NN&quot;</span>
</span><span class='line'>    <span class="n">code_is_pp_kind</span> <span class="o">=</span> <span class="n">parameter</span><span class="p">[:</span><span class="mi">24</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;PP&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">code_is_safe_to_use</span> <span class="ow">and</span> <span class="n">code_is_nn_kind</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;The rabbit is in the hole&quot;</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">code_is_safe_to_use</span> <span class="ow">and</span> <span class="n">code_is_pp_kind</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;The rabbit is in the hole, but is from another kind&quot;</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;No rabbit :(&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">code_formatted</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">text</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">text</span><span class="p">)</span> <span class="o">==</span> <span class="mi">26</span> <span class="ow">and</span> <span class="n">text</span><span class="p">[:</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;01&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>El método <em>code_formatted</em> en otros contextos no es trivial de inferir. Hacer
estas separaciones nos habilita a tener una visión mucho más clara de qué se debe
refactorizar y cómo. Con esto, podemos eliminar la variable
<em>code_has_correct_format</em> y usar directamente la función.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">validate_product</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">code</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;code&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">some_result_is_ok</span> <span class="o">=</span> <span class="n">big_calculation</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'>    <span class="c">#removing variable, using function instead :O</span>
</span><span class='line'>    <span class="n">code_is_safe_to_use</span> <span class="o">=</span> <span class="n">code_formatted</span><span class="p">(</span><span class="n">code</span><span class="p">)</span> <span class="ow">and</span> <span class="n">some_result_is_ok</span>
</span><span class='line'>    <span class="n">code_is_nn_kind</span> <span class="o">=</span> <span class="n">parameter</span><span class="p">[:</span><span class="mi">24</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;NN&quot;</span>
</span><span class='line'>    <span class="n">code_is_pp_kind</span> <span class="o">=</span> <span class="n">parameter</span><span class="p">[:</span><span class="mi">24</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;PP&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">code_is_safe_to_use</span> <span class="ow">and</span> <span class="n">code_is_nn_kind</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;The rabbit is in the hole&quot;</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">code_is_safe_to_use</span> <span class="ow">and</span> <span class="n">code_is_pp_kind</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;The rabbit is in the hole, but is from another kind&quot;</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;No rabbit :(&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">code_formatted</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">text</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">text</span><span class="p">)</span> <span class="o">==</span> <span class="mi">26</span> <span class="ow">and</span> <span class="n">text</span><span class="p">[:</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;01&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finalmente, en el if tenemos dos opciones, la primera es mantener lo que está:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">if</span> <span class="n">code_is_safe_to_use</span> <span class="ow">and</span> <span class="n">code_is_nn_kind</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;The rabbit is in the hole&quot;</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">code_is_safe_to_use</span> <span class="ow">and</span> <span class="n">code_is_pp_kind</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;The rabbit is in the hole, but is from another kind&quot;</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;No rabbit :(&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>La otra opción es anidar la segunda condición en un nuevo if:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">if</span> <span class="n">code_is_safe_to_use</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">code_is_nn_kind</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;The rabbit is in the hole&quot;</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;The rabbit is in the hole, but is from another kind&quot;</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;No rabbit :(&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>En lo personal me gusta más la primera, en general evito hacer muchas anidaciones
y dos condiciones me parece razonable en un if de una linea a pesar de mantener un
poco de redundancia. Eso queda al gusto del programador.</p>

<p>Eso por ahora, la segunda parte tratará sobre la importancia de ser <em>positivo
en los condicionales</em>, cómo gracias a eso se puede aplicar <a href="http://es.wikipedia.org/wiki/Leyes_de_De_Morgan">La Ley de Morgan</a>
de lógica proposicional para hacer mejoras y por qué <em>menos líneas no siempre es
mejor</em>.</p>

<p>Hasta la próxima.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configurando GitHub Pages con nic.cl]]></title>
    <link href="http://decklord.github.io/blog/2013/12/09/configurando-github-pages-con-nic-dot-cl/"/>
    <updated>2013-12-09T11:03:03-03:00</updated>
    <id>http://decklord.github.io/blog/2013/12/09/configurando-github-pages-con-nic-dot-cl</id>
    <content type="html"><![CDATA[<h2>TL;DR</h2>

<p>En estos minutos estoy intenando linkear mi dominio <a href="http://clopez.cl">http://clopez.cl</a>
a <a href="http://pages.github.com/">GitHub Pages</a>.</p>

<h2>Muerte a Tumblr</h2>

<p>Así es, migre mi blog de Tumblr, pues como plataforma de
blogging es una real basura. Sirve para fotos, pero escribir en tumblr es
un asco, el espacio es pequeño y el editor en si es lento, falla y pierdes todo.</p>

<p>La tienes aún peor si quieres escribir un blog de programación, activar
<a href="http://decklord.tumblr.com/post/60947643317/add-syntax-highlight-to-tumblr">colores en el código</a>
no es directo y agregar código en sí en el editor html es <em>muy muy tedioso</em>.</p>

<p>Usando una plataforma pésima es malo, hace que escribas menos o directamente que
no escribas nada.</p>

<!-- more -->


<h2>Migrando a Octopress</h2>

<p>Buscando un poco llegue a Octopress, claramente <em>LA opción</em> para desarroladores.
Usa Markdown syntax para escribir los posts, por lo que puedo usar cualquier
editor y lo hago en mi equipo.</p>

<p>Montar todo en Octopress tampoco es sencillo, pero si eres desarrollador
el proceso puede ser entretenido. Una vez que tuve todo configurado para
funcionar llegue a la parte de &ldquo;¿Ya y ahora como conecto esto a mi dominio
personal?&rdquo;. Desafortunadamente en <a href="http://www.nic.cl">nic.cl</a> esto no es directo.</p>

<p>En nic hay que configurar los DNS, colocando un nombre de servidor primario y su
respectiva ip. Por otra parte, GitHub Pages no nos permite hacer esto tampoco.</p>

<p>Usualmente la configuración del dominio es sencillo cuando contratamos un servicio
de Hosting pagado. Ellos te dicen cual es tu servidor DNS, su ip y en 5 minutos el
problema esta resuelto.</p>

<p>Evidentemente no quiero pagar nada de eso, pues no usare el espacio de hosting.
Descubrí entonces que lo que se necesita es un administrador de DNS que actua
como <em>proxy</em> o nexo entre nic y donde estan los archivos.</p>

<h2>FreeDNS.ws es tu amigo</h2>

<p>Buscando buscando encontre este sitio <a href="http://freedns.ws/">FreeDNS</a>. Lo mejor
que tiene es que:</p>

<p><img src="http://images1.wikia.nocookie.net/__cb20120228145016/inciclopedia/images/4/4d/Its_free.png" alt="" /></p>

<p>Luego de crear la cuenta, tenemos que agregar una <em>Zona</em>.</p>

<p><img src="http://decklord.github.io/images/posts/2013_12_09_3.png" alt="" /></p>

<p>En mi caso utilizo clopez.cl en <em>Domain Name</em> y como <em>IP Adress</em> hay que poner
<a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages#domains">la ip de GitHub Pages</a>,
<em>204.232.175.78</em>.</p>

<p>FreeDNS nos provee ahora las ips de servidor NS:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ns1.freedns.ws
</span><span class='line'>ns2.freedns.ws</span></code></pre></td></tr></table></div></figure>


<p>En nic nos piden la ip de dicho servicio, esto es facil de obtener, lo hacemos
con el comando ping en la terminal.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ping ns1.freedns.ws</span></code></pre></td></tr></table></div></figure>


<p>Deberíamos ver algo como esto</p>

<p><img src="http://decklord.github.io/images/posts/2013_12_09_1.png" alt="" /></p>

<p>Ahí esta, la ip de FreeDNS es 188.190.119.10 para el ns1. Obtenemos la otra IP
haciendo lo mismo y en el panel de nic ingresamos los datos:</p>

<p><img src="http://decklord.github.io/images/posts/2013_12_09_2.png" alt="" /></p>

<p>Y ahora a esperar, puede tardar unas horas en aparecer tu dominio.
Fin!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guardar y cargar cookies en Objective-C]]></title>
    <link href="http://decklord.github.io/blog/2013/09/11/how-to-save-and-load-cookies-on-objective-c-when/"/>
    <updated>2013-09-11T21:06:59-03:00</updated>
    <id>http://decklord.github.io/blog/2013/09/11/how-to-save-and-load-cookies-on-objective-c-when</id>
    <content type="html"><![CDATA[<p>Por lo que he visto, cargar y guardar cookies para persistir sesiones en un
servidor remoto es un tema muy recurrente en Objective-C.</p>

<p>Navegando en las preguntas de StackOverflow me encontre con alguien que pedía
<a href="http://stackoverflow.com/questions/14387662/afnetworking-persisting-cookies-automatically/14405805#14405805">justamente eso</a>
a lo cual le respondí, por lo que aprovecho de compartir el snipet acá en un post.</p>

<p>Usualmente el servidor remoto nos envia un <em>hash</em> de la sesión en los headers de
la respuesta HTTP. El objetivo es almacenar este valor en cookies dentro del
dispositivo para usarlo más tarde.</p>

<p>La típica situación para esto es, por ejemplo, un login. Luego de que la sessión se
acepta es importante almacenar la cookie pues de lo contrario, al abrir nuevamente
la app, perderemos la sesión.</p>

<!-- more -->


<p>Lo anterior se puede lograr utilizando <em>NSKeyedUnarchiver</em> y <em>NSKeyedArchived</em>.</p>

<p>Para guardar la sesión:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">saveCookies</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSHTTPCookieStorage</span> <span class="o">*</span><span class="n">storage</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSHTTPCookieStorage</span> <span class="n">sharedHTTPCookieStorage</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSData</span> <span class="o">*</span><span class="n">cookiesData</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSKeyedArchiver</span> <span class="nl">archivedDataWithRootObject:</span> <span class="p">[</span><span class="n">storage</span> <span class="n">cookies</span><span class="p">]];</span>
</span><span class='line'>    <span class="n">NSUserDefaults</span> <span class="o">*</span><span class="n">defaults</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">defaults</span> <span class="nl">setObject:</span> <span class="n">cookiesData</span> <span class="nl">forKey:</span> <span class="s">@&quot;sessionCookies&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">defaults</span> <span class="n">synchronize</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Este método se debe invocar después de que recibimos la respuesta del servidor.
Por otra parte, cuando iniciamos la App es necesario cargar esta info:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">loadCookies</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSUserDefaults</span> <span class="o">*</span><span class="n">userDefaults</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSData</span> <span class="o">*</span><span class="n">sessionCookies</span> <span class="o">=</span> <span class="p">[</span><span class="n">userDefaults</span> <span class="nl">objectForKey:</span><span class="s">@&quot;sessionCookies&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSArray</span> <span class="o">*</span><span class="n">cookies</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSKeyedUnarchiver</span> <span class="nl">unarchiveObjectWithData:</span><span class="n">sessionCookies</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSHTTPCookieStorage</span> <span class="o">*</span><span class="n">cookieStorage</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSHTTPCookieStorage</span> <span class="n">sharedHTTPCookieStorage</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">NSHTTPCookie</span> <span class="o">*</span><span class="n">cookie</span> <span class="k">in</span> <span class="n">cookies</span><span class="p">){</span>
</span><span class='line'>        <span class="p">[</span><span class="n">cookieStorage</span> <span class="nl">setCookie:</span> <span class="n">cookie</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>En este caso, lo ideal es llamar este método en el <em>App Delegate</em> al comienzo de
la app.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[enumerateObjectsUsingBlock, loops prácticos en Objective-C]]></title>
    <link href="http://decklord.github.io/blog/2013/07/11/an-useful-way-to-loop-in-objective-c-using/"/>
    <updated>2013-07-11T20:06:59-04:00</updated>
    <id>http://decklord.github.io/blog/2013/07/11/an-useful-way-to-loop-in-objective-c-using</id>
    <content type="html"><![CDATA[<p>Hace unos días estaba leyendo <a href="http://nshipster.com/">NSHipster</a> de
<a href="http://mattt.me/">Matt Thompson</a> y descubrí un buen post
acerca de <em>enumerators</em>. En el mencionaban como hacer un loop usando <strong>enumerateObjectsUsingBlock</strong>.</p>

<!-- more -->


<h2>Iterando sobre objetos</h2>

<p>La típica forma de iterar sobre un objeto es la siguiente:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">someArray</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSArray</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">100</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSObject</span> <span class="o">*</span><span class="n">object</span> <span class="o">=</span> <span class="p">[</span><span class="n">someArray</span> <span class="nl">objectAtIndex:</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lo malo es que esta forma es un poco engorrosa, pues hay que buscar el
objeto usando el <em>índice <strong>i</strong></em>. Cuando no nos importa usar el índice lo ideal
es utilizar el modo <em>&ldquo;forin&rdquo;</em>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">NSObject</span> <span class="o">*</span><span class="n">object</span> <span class="k">in</span> <span class="n">someArray</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">object</span> <span class="n">someMethod</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Esta forma es mucho mas sencilla y limpia, utiliza <em>NSFastEnumeration</em> en su
implementación, la cual es la manera más rápida de iterar sobre un objeto en
Objective-C, incluso mas rápido que usar un <em>for/while</em> en C.</p>

<p>Ahora bien, ¿qué pasa cuando queremos usar este tipo de <em>for</em> y además queremos
utilizar el índice? Volvemos a algo similar al primer ejemplo, o incluso peor.
Se define el indice fuera del ciclo, de la siguiente manera:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">NSObject</span> <span class="o">*</span><span class="n">object</span> <span class="k">in</span> <span class="n">someArray</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">object</span> <span class="n">someMethod</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">//Do something with i</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Una forma más limpia</h2>

<p>En Objective-C existe una forma de declarar el índice y tener el objeto en
una sola línea, esto se hace utilizando <strong>enumerateObjectsUsingBlock</strong>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">someArray</span> <span class="nl">enumerateObjectsUsingBlock:</span><span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">object</span><span class="p">,</span> <span class="n">NSUInteger</span> <span class="n">i</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">object</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Esta disponible para <em>NSArray, NSSet, NSDictionary y NSIndexSet</em>. Con esta
manera nos olvidamos de declarar variables auxiliares.</p>

<p>El equivalente al <em>break</em> en este tipo de loops en hacer que la variable <em>stop</em>
tenga el valor <em>True</em>.</p>

<p>Una característica interesante de enumerateObjectsUsingBlock es su variante:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="nl">enumerateObjectsWithOptions:usingBlock:</span>
</span></code></pre></td></tr></table></div></figure>


<p>La cual puede recibir un parámetro de tipo <em>NSEnumerationOptions</em>.
Se puede, entre otras cosas, revertir el orden en el que se recorren los
elementos usando <em>NSEnumerationReverse</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Como cargar tu app en un iPhone usando iTunes]]></title>
    <link href="http://decklord.github.io/blog/2013/07/11/how-to-load-your-app-into-a-remote-mobile-phone-using-itunes/"/>
    <updated>2013-07-11T19:06:59-04:00</updated>
    <id>http://decklord.github.io/blog/2013/07/11/how-to-load-your-app-into-a-remote-mobile-phone-using-itunes</id>
    <content type="html"><![CDATA[<p>Hoy tuve que mostrar una aplicación para iPhone a un cliente remoto, la idea
era que probaran la aplicación en su dispositivo móvil antes de subir todo
a la AppStore.</p>

<p>Para realizar este proceso existen aplicaciones como
<a href="https://testflightapp.com/" title="TestFlight">Testflight</a> o
<a href="http://hockeyapp.net/" title="HockeyApp">HockeyApp</a>, que simplifican bastante el
 proceso y permiten cargar remotamente una app teniendo el id del dispositivo.</p>

<p>A modo didáctico quise entender que es lo que hacen estas aplicaciones para
llevar la aplicación al teléfono, por lo que en este post explicaré como hacer
el proceso utilizando sólo iTunes.</p>

<!-- more -->


<h2>Agregando el dispositivo al Provisioning Profile</h2>

<p>Lo primero es asegurarnos que el dispositivo del cliente esta en el
<strong>Provisioning Profile</strong>. Para ello
<a href="http://bjango.com/help/iphoneudid/">necesitamos su UDID</a>.</p>

<p>Teniendo el identificador del dispositivo, lo agregamos en
<a href="http://developers.apple.com">http://developers.apple.com</a>
como se indica en esta pregunta de
<a href="http://stackoverflow.com/questions/3578158/adding-devices-to-team-provisioning-profile">Stack Overflow</a>.</p>

<h2>Generando el archivo IPA</h2>

<p>Lo segundo es generar un
<a href="http://en.wikipedia.org/wiki/.ipa_(file_extension)">archivo IPA</a> con tu App,
para ello realizaremos lo siguiente:</p>

<p>Ir a XCode y seleccionar <strong>iOS Device</strong> en la lista de dispositivos
como en la imagen.</p>

<p><img src="http://decklord.github.io/images/posts/2013_07_11_1.png" alt="" /></p>

<p>Luego ir a la pestaña de <strong>Product</strong> y elegir <strong>Archive</strong> como en la foto.</p>

<p><img src="http://decklord.github.io/images/posts/2013_07_11_2.png" alt="" /></p>

<p>XCode compilará la aplicación y al finalizar, tu App aparecerá archivada en la
pestaña  <strong>Archive</strong> en el <strong>Organizer</strong> de XCode. Si todo esta en orden, hacer click
 en <strong>Distribute</strong>.</p>

<p><img src="http://decklord.github.io/images/posts/2013_07_11_3.png" alt="" /></p>

<p>Aparecerá una pantalla donde se pregunta como distribuir tu aplicación, en ella
elegimos <strong>Save for Enterprise or Ad-Hoc Deplyment</strong>. Luego seguir las
instrucciones y guardar el archivo IPA.</p>

<p><img src="http://decklord.github.io/images/posts/2013_07_11_4.png" alt="" /></p>

<h2>Cargando la App con iTunes</h2>

<p>Con el archivo IPA localizado, abrir <strong>iTunes</strong> e ir a <strong>File > Add to
Library &hellip;</strong>* o presiona ⌘+O y elige el archivo <strong>.ipa</strong>.</p>

<p><img src="http://decklord.github.io/images/posts/2013_07_11_5.png" alt="" /></p>

<p>Ahora conecta el dispositivo, espera a la sincronización y luego hacer click en
en el botón de iPhone como en la imagen y luego ir a la pestaña <strong>Apps</strong> en la
sección de iPhone.</p>

<p><img src="http://decklord.github.io/images/posts/2013_07_11_6.png" alt="" /></p>

<p>Finalmente encuentra tu app, la instalamos:</p>

<p><img src="http://decklord.github.io/images/posts/2013_07_11_7.png" alt="" /></p>

<p>y le damos al botón <strong>Sync</strong>.</p>

<p><img src="http://decklord.github.io/images/posts/2013_07_11_8.png" alt="" /></p>
]]></content>
  </entry>
  
</feed>
