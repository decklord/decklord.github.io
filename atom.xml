<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Camilo López A.]]></title>
  <link href="http://decklord.github.io/atom.xml" rel="self"/>
  <link href="http://decklord.github.io/"/>
  <updated>2013-12-09T10:31:40-03:00</updated>
  <id>http://decklord.github.io/</id>
  <author>
    <name><![CDATA[Camilo López A.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Guardar y cargar cookies en Objective-C]]></title>
    <link href="http://decklord.github.io/blog/2013/09/11/how-to-save-and-load-cookies-on-objective-c-when/"/>
    <updated>2013-09-11T21:06:59-03:00</updated>
    <id>http://decklord.github.io/blog/2013/09/11/how-to-save-and-load-cookies-on-objective-c-when</id>
    <content type="html"><![CDATA[<p>Por lo que he visto, cargar y guardar cookies para persistir sesiones en un
servidor remoto es un tema muy recurrente en Objective-C.</p>

<p>Navegando en las preguntas de StackOverflow me encontre con alguien que pedía
<a href="http://stackoverflow.com/questions/14387662/afnetworking-persisting-cookies-automatically/14405805#14405805">justamente eso</a>
a lo cual le respondí, por lo que aprovecho de compartir el snipet acá en un post.</p>

<p>Usualmente el servidor remoto nos envia un <em>hash</em> de la sesión en los headers de
la respuesta HTTP. El objetivo es almacenar este valor en cookies dentro del
dispositivo para usarlo más tarde.</p>

<p>La típica situación para esto es, por ejemplo, un login. Luego de que la sessión se
acepta es importante almacenar la cookie pues de lo contrario, al abrir nuevamente
la app, perderemos la sesión.</p>

<!-- more -->


<p>Lo anterior se puede lograr utilizando <em>NSKeyedUnarchiver</em> y <em>NSKeyedArchived</em>.</p>

<p>Para guardar la sesión:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">saveCookies</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSHTTPCookieStorage</span> <span class="o">*</span><span class="n">storage</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSHTTPCookieStorage</span> <span class="n">sharedHTTPCookieStorage</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSData</span> <span class="o">*</span><span class="n">cookiesData</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSKeyedArchiver</span> <span class="nl">archivedDataWithRootObject:</span> <span class="p">[</span><span class="n">storage</span> <span class="n">cookies</span><span class="p">]];</span>
</span><span class='line'>    <span class="n">NSUserDefaults</span> <span class="o">*</span><span class="n">defaults</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">defaults</span> <span class="nl">setObject:</span> <span class="n">cookiesData</span> <span class="nl">forKey:</span> <span class="s">@&quot;sessionCookies&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">defaults</span> <span class="n">synchronize</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Este método se debe invocar después de que recibimos la respuesta del servidor.
Por otra parte, cuando iniciamos la App es necesario cargar esta info:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">loadCookies</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSUserDefaults</span> <span class="o">*</span><span class="n">userDefaults</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSData</span> <span class="o">*</span><span class="n">sessionCookies</span> <span class="o">=</span> <span class="p">[</span><span class="n">userDefaults</span> <span class="nl">objectForKey:</span><span class="s">@&quot;sessionCookies&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSArray</span> <span class="o">*</span><span class="n">cookies</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSKeyedUnarchiver</span> <span class="nl">unarchiveObjectWithData:</span><span class="n">sessionCookies</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSHTTPCookieStorage</span> <span class="o">*</span><span class="n">cookieStorage</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSHTTPCookieStorage</span> <span class="n">sharedHTTPCookieStorage</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">NSHTTPCookie</span> <span class="o">*</span><span class="n">cookie</span> <span class="k">in</span> <span class="n">cookies</span><span class="p">){</span>
</span><span class='line'>        <span class="p">[</span><span class="n">cookieStorage</span> <span class="nl">setCookie:</span> <span class="n">cookie</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>En este caso, lo ideal es llamar este método en el <em>App Delegate</em> al comienzo de
la app.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[enumerateObjectsUsingBlock, loops prácticos en Objective-C]]></title>
    <link href="http://decklord.github.io/blog/2013/07/11/an-useful-way-to-loop-in-objective-c-using/"/>
    <updated>2013-07-11T20:06:59-04:00</updated>
    <id>http://decklord.github.io/blog/2013/07/11/an-useful-way-to-loop-in-objective-c-using</id>
    <content type="html"><![CDATA[<p>Hace unos días estaba leyendo <a href="http://nshipster.com/">NSHipster</a> de
<a href="http://mattt.me/">Matt Thompson</a> y descubrí un buen post
acerca de <em>enumerators</em>. En el mencionaban como hacer un loop usando <strong>enumerateObjectsUsingBlock</strong>.</p>

<!-- more -->


<h2>Iterando sobre objetos</h2>

<p>La típica forma de iterar sobre un objeto es la siguiente:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">someArray</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSArray</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">100</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSObject</span> <span class="o">*</span><span class="n">object</span> <span class="o">=</span> <span class="p">[</span><span class="n">someArray</span> <span class="nl">objectAtIndex:</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lo malo es que esta forma es un poco engorrosa, pues hay que buscar el
objeto usando el <em>índice <strong>i</strong></em>. Cuando no nos importa usar el índice lo ideal
es utilizar el modo <em>&ldquo;forin&rdquo;</em>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">NSObject</span> <span class="o">*</span><span class="n">object</span> <span class="k">in</span> <span class="n">someArray</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">object</span> <span class="n">someMethod</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Esta forma es mucho mas sencilla y limpia, utiliza <em>NSFastEnumeration</em> en su
implementación, la cual es la manera más rápida de iterar sobre un objeto en
Objective-C, incluso mas rápido que usar un <em>for/while</em> en C.</p>

<p>Ahora bien, ¿qué pasa cuando queremos usar este tipo de <em>for</em> y además queremos
utilizar el índice? Volvemos a algo similar al primer ejemplo, o incluso peor.
Se define el indice fuera del ciclo, de la siguiente manera:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">NSObject</span> <span class="o">*</span><span class="n">object</span> <span class="k">in</span> <span class="n">someArray</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">object</span> <span class="n">someMethod</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">//Do something with i</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Una forma más limpia</h2>

<p>En Objective-C existe una forma de declarar el índice y tener el objeto en
una sola línea, esto se hace utilizando <strong>enumerateObjectsUsingBlock</strong>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">someArray</span> <span class="nl">enumerateObjectsUsingBlock:</span><span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">object</span><span class="p">,</span> <span class="n">NSUInteger</span> <span class="n">i</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">object</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Esta disponible para <em>NSArray, NSSet, NSDictionary y NSIndexSet</em>. Con esta
manera nos olvidamos de declarar variables auxiliares.</p>

<p>El equivalente al <em>break</em> en este tipo de loops en hacer que la variable <em>stop</em>
tenga el valor <em>True</em>.</p>

<p>Una característica interesante de enumerateObjectsUsingBlock es su variante:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="nl">enumerateObjectsWithOptions:usingBlock:</span>
</span></code></pre></td></tr></table></div></figure>


<p>La cual puede recibir un parámetro de tipo <em>NSEnumerationOptions</em>.
Se puede, entre otras cosas, revertir el orden en el que se recorren los
elementos usando <em>NSEnumerationReverse</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Como cargar tu app en un iPhone usando iTunes]]></title>
    <link href="http://decklord.github.io/blog/2013/07/11/how-to-load-your-app-into-a-remote-mobile-phone-using-itunes/"/>
    <updated>2013-07-11T19:06:59-04:00</updated>
    <id>http://decklord.github.io/blog/2013/07/11/how-to-load-your-app-into-a-remote-mobile-phone-using-itunes</id>
    <content type="html"><![CDATA[<p>Hoy tuve que mostrar una aplicación para iPhone a un cliente remoto, la idea
era que probaran la aplicación en su dispositivo móvil antes de subir todo
a la AppStore.</p>

<p>Para realizar este proceso existen aplicaciones como
<a href="https://testflightapp.com/" title="TestFlight">Testflight</a> o
<a href="http://hockeyapp.net/" title="HockeyApp">HockeyApp</a>, que simplifican bastante el
 proceso y permiten cargar remotamente una app teniendo el id del dispositivo.</p>

<p>A modo didáctico quise entender que es lo que hacen estas aplicaciones para
llevar la aplicación al teléfono, por lo que en este post explicaré como hacer
el proceso utilizando sólo iTunes.</p>

<!-- more -->


<h2>Agregando el dispositivo al Provisioning Profile</h2>

<p>Lo primero es asegurarnos que el dispositivo del cliente esta en el
<strong>Provisioning Profile</strong>. Para ello
<a href="http://bjango.com/help/iphoneudid/">necesitamos su UDID</a>.</p>

<p>Teniendo el identificador del dispositivo, lo agregamos en
<a href="http://developers.apple.com">http://developers.apple.com</a>
como se indica en esta pregunta de
<a href="http://stackoverflow.com/questions/3578158/adding-devices-to-team-provisioning-profile">Stack Overflow</a>.</p>

<h2>Generando el archivo IPA</h2>

<p>Lo segundo es generar un
<a href="http://en.wikipedia.org/wiki/.ipa_(file_extension)">archivo IPA</a> con tu App,
para ello realizaremos lo siguiente:</p>

<p>Ir a XCode y seleccionar <strong>iOS Device</strong> en la lista de dispositivos
como en la imagen.</p>

<p><img src="images/posts/2013_07_11_1.png" alt="" /></p>

<p>Luego ir a la pestaña de <strong>Product</strong> y elegir <strong>Archive</strong> como en la foto.</p>

<p><img src="images/posts/2013_07_11_2.png" alt="" /></p>

<p>XCode compilará la aplicación y al finalizar, tu App aparecerá archivada en la
pestaña  <strong>Archive</strong> en el <strong>Organizer</strong> de XCode. Si todo esta en orden, hacer click
 en <strong>Distribute</strong>.</p>

<p><img src="images/posts/2013_07_11_3.png" alt="" /></p>

<p>Aparecerá una pantalla donde se pregunta como distribuir tu aplicación, en ella
elegimos <strong>Save for Enterprise or Ad-Hoc Deplyment</strong>. Luego seguir las
instrucciones y guardar el archivo IPA.</p>

<p><img src="images/posts/2013_07_11_4.png" alt="" /></p>

<h2>Cargando la App con iTunes</h2>

<p>Con el archivo IPA localizado, abrir <strong>iTunes</strong> e ir a <strong>File > Add to
Library &hellip;</strong>* o presiona ⌘+O y elige el archivo <strong>.ipa</strong>.</p>

<p><img src="images/posts/2013_07_11_5.png" alt="" /></p>

<p>Ahora conecta el dispositivo, espera a la sincronización y luego hacer click en
en el botón de iPhone como en la imagen y luego ir a la pestaña <strong>Apps</strong> en la
sección de iPhone.</p>

<p><img src="images/posts/2013_07_11_6.png" alt="" /></p>

<p>Finalmente encuentra tu app, la instalamos:</p>

<p><img src="images/posts/2013_07_11_7.png" alt="" /></p>

<p>y le damos al botón <strong>Sync</strong>.</p>

<p><img src="images/posts/2013_07_11_8.png" alt="" /></p>
]]></content>
  </entry>
  
</feed>
